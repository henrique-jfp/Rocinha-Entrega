#!/usr/bin/env python3
"""
Script para limpar webhooks e garantir que n√£o h√° outras inst√¢ncias do bot rodando.
Deve ser executado antes de iniciar o bot.
"""
import os
import sys
import requests

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN n√£o configurado")
    sys.exit(1)

def delete_webhook():
    """Remove qualquer webhook configurado"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
    try:
        response = requests.post(url, json={"drop_pending_updates": True}, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Webhook removido com sucesso")
            return True
        else:
            print(f"‚ö†Ô∏è Falha ao remover webhook: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao remover webhook: {e}")
        return False

def close_existing_connections():
    """Tenta fechar conex√µes existentes fazendo um getUpdates com offset alto"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    try:
        # Faz um getUpdates com offset muito alto para "limpar" qualquer conex√£o antiga
        response = requests.post(url, json={"offset": -1, "timeout": 1}, timeout=5)
        if response.status_code == 200:
            print("‚úÖ Conex√µes antigas fechadas")
            return True
        else:
            print(f"‚ö†Ô∏è Falha ao fechar conex√µes: {response.text}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao fechar conex√µes (pode ser normal): {e}")
        return True  # N√£o √© cr√≠tico

if __name__ == "__main__":
    print("üßπ Limpando webhooks e conex√µes antigas...")
    delete_webhook()
    close_existing_connections()
    print("‚úÖ Limpeza conclu√≠da. Bot pode iniciar.")
