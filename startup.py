#!/usr/bin/env python3
"""
Script de startup que roda ANTES do bot iniciar.
Aplica migra√ß√µes automaticamente se necess√°rio.
"""

import os
import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent))

def run_migrations():
    """Aplica migra√ß√µes pendentes"""
    print("=" * 60)
    print("üîç Verificando migra√ß√µes pendentes...")
    print("=" * 60)
    
    # Verifica se deve rodar migra√ß√£o
    run_migration = os.getenv("RUN_MIGRATION", "false").lower() == "true"
    
    if run_migration:
        print("‚úÖ RUN_MIGRATION=true detectado")
        print("üîÑ Aplicando migra√ß√£o CASCADE DELETE...")
        
        try:
            from delivery_system.apply_cascade_migration import apply_migration
            success = apply_migration()
            
            if success:
                print("‚úÖ Migra√ß√£o aplicada com sucesso!")
                # Remove a flag para n√£o rodar novamente
                print("üí° Dica: Remova a vari√°vel RUN_MIGRATION do Railway")
            else:
                print("‚ùå Migra√ß√£o falhou!")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao aplicar migra√ß√£o: {e}")
            import traceback
            traceback.print_exc()
            return False
    else:
        print("‚ÑπÔ∏è  Nenhuma migra√ß√£o pendente")
        print("üí° Para for√ßar migra√ß√£o, adicione vari√°vel: RUN_MIGRATION=true")
    
    print("=" * 60)
    return True

if __name__ == "__main__":
    # Roda migra√ß√µes
    if not run_migrations():
        print("‚ö†Ô∏è Migra√ß√£o falhou, mas continuando inicializa√ß√£o...")
    
    # Inicia o bot normalmente
    print("\nü§ñ Iniciando bot...")
    from delivery_system.bot import main
    main()
